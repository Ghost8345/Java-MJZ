/* Generated By:JavaCC: Do not edit this line. Parser.java */
package htmlGrammer;

import java.io.*;

public class Parser implements ParserConstants {
    static String stripOffQuotes(String quotedString) {
        return quotedString.substring(1, quotedString.length() - 1);
    }

    public static void main(String[] args) throws Exception {
            Parser parser = new Parser(System.in);
            parser.start();
    }

  static final public String start() throws ParseException, Exception {
                                   String s = "";
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      s = create();
      jj_consume_token(EOL);
    }
    jj_consume_token(7);
     {if (true) return s;}
    throw new Error("Missing return statement in function");
  }

  static final public String create() throws ParseException {
    String e = "";
    jj_consume_token(8);
    e = element();
        System.out.println(e);
        File file = new File("output.html");
        try {
            BufferedWriter out = new BufferedWriter(new FileWriter(file,true));
            out.write(e);
            out.close();
            {if (true) return e;}
        } catch (IOException e1) {
            e1.printStackTrace();
        }
    throw new Error("Missing return statement in function");
  }

  static final public String element() throws ParseException {
                     String e = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 12:
      e = img();
      break;
    case 9:
      e = para();
      break;
    case 10:
      e = heading();
      break;
    case 11:
      e = link();
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

  static final public String para() throws ParseException {
StringBuilder style = new StringBuilder();
StringBuilder text = new StringBuilder();
    jj_consume_token(9);
    decorated_text(style,text);
      if (!style.isEmpty()) {style.insert(0," style=\u005c""); style.append("\u005c"");}
      {if (true) return "<p" + style + ">"+ text + "</p>";}
    throw new Error("Missing return statement in function");
  }

  static final public String heading() throws ParseException {
 StringBuilder style = new StringBuilder();
 StringBuilder text = new StringBuilder();
    jj_consume_token(10);
    decorated_text(style,text);
      if (!style.isEmpty()) {style.insert(0," style=\u005c""); style.append("\u005c"");}
      {if (true) return "<h1" + style + ">"+ text +"</h1>";}
    throw new Error("Missing return statement in function");
  }

  static final public String link() throws ParseException {
StringBuilder style = new StringBuilder();
StringBuilder text = new StringBuilder();
StringBuilder href = new StringBuilder();
    jj_consume_token(11);
    decorated_url(style,text, href);
        if (!href.isEmpty())  href.insert(0, " href=");
        if (!style.isEmpty()) {style.insert(0," style=\u005c""); style.append("\u005c"");}
      {if (true) return "<a"+ href + style + ">" + text + "</a>";}
    throw new Error("Missing return statement in function");
  }

//DONE
  static final public String img() throws ParseException {
                 Token source;
    jj_consume_token(12);
    jj_consume_token(13);
    jj_consume_token(14);
    source = jj_consume_token(QUOTED_STRING);
      {if (true) return "<img src=" + source + "></img>";}
    throw new Error("Missing return statement in function");
  }

  static final public void decorated_text(StringBuilder style, StringBuilder text) throws ParseException {
                                                                 Token t;
    jj_consume_token(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      t = jj_consume_token(QUOTED_STRING);
            style.append("color:" + stripOffQuotes(t.toString()) + ";");
      break;
    case 16:
      jj_consume_token(16);
      t = jj_consume_token(QUOTED_STRING);
            style.append("font-family:" + stripOffQuotes(t.toString()) + ";");
      break;
    case 17:
      jj_consume_token(17);
      t = jj_consume_token(QUOTED_STRING);
            text.append(stripOffQuotes(t.toString()));
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      decorated_text(style,text);
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void decorated_url(StringBuilder style, StringBuilder text, StringBuilder link) throws ParseException {
                                                                                    Token t = null;
    jj_consume_token(13);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      jj_consume_token(15);
      t = jj_consume_token(QUOTED_STRING);
            style.append("color:" + stripOffQuotes(t.toString()) + ";");
      break;
    case 16:
      jj_consume_token(16);
      t = jj_consume_token(QUOTED_STRING);
            style.append("font-family:" + stripOffQuotes(t.toString()) + ";");
      break;
    case 17:
      jj_consume_token(17);
      t = jj_consume_token(QUOTED_STRING);
            text.append(stripOffQuotes(t.toString()));
      break;
    case 11:
      jj_consume_token(11);
      t = jj_consume_token(QUOTED_STRING);
            link.append(t.toString());
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      decorated_url(style,text,link);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x1e00,0x38000,0x40000,0x38800,0x40000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
